<그리디 알고리즘> 그리디 알고리즘은 각 단계에서 최적의 선택을 하는 알고리즘이다. 기본적으로 그리디 알고리즘은 최적의 값에 근사한 값을 찾는 것을 목표로 한다. 그리디 알고리즘은 특정한 문제 상황에서 항상 최적의 선택을 한다. 그리디 알고리즘은 최적화 문제를 해결할 때에 가장 적합하지만, 항상 최적의 해결책을 보장하지는 않는다. 그 이유는 각 단계에서 가장 좋아 보이는 선택을 하기 때문에 전체적인 흐름 상에서 최적해는 아닐 수 있기 때문이다. 하지만 시간 복잡도나 공간 복잡도가 중요시되는 문제에 있어서는 그리디 알고리즘이 효율적으로 사용되기도 한다.

<다이나믹 프로그래밍> 다이나믹 프로그래밍은 중복되는 하위 문제라는 특성을 가진 문제를 해결하는 데에 효과적인 알고리즘이다. 모든 가능한 경우를 확인하기 때문에 근사치가 아닌 정확한 값을 얻을 수 있다는 장점이 존재하지만, 모든 가능성에 대한 고려가 불충분할 경우 최적의 결과를 보장할 수 없기도 하다. 다이나믹 프로그래밍은 최적화 문제를 해결할 때 유용하며, 특정 범위까지의 값을 구하기 위해 다른 범위까지의 값을 이용한다. 그 방식은 하나의 큰 문제를 최소 단위의 여러 개의 부분 문제로 분할한 뒤, 부분 문제의 정답을 재사용해 큰 문제를 해결해 나가는 상향식 또는 하향식 접근법을 사용해 문제를 해결하는 것이다. 이를 통해 다이나믹 프로그래밍은 중복 계산을 피해 알고리즘의 효율성을 크게 향상시킬 수 있다.

<Transform and Conquer> Transform and Conquer 알고리즘은 문제를 더 간단하거나 효율적으로 해결할 수 있는 형태로 변환한 후에 문제를 해결하는 알고리즘이다. Transform and Conquer 알고리즘에는 다양한 유형이 있는데 각 유형은 다음과 같다. 우선 문제를 더 간단한 형태나 작은 크기로 변환하는 인스턴스 단순화 유형이 있다. 다음은 문제 자체를 더 간단한 문제로 변환하는 문제 단순화 유형이 있다. 마지막은 문제를 해결하기 위해 효율적인 자료구조를 사용하는 자료구조 변환 유형이 있다. Transform and Conquer 알고리즘은 문제 해결을 위한 효율적인 접근법을 제공하지만, 적절한 변환 방식을 선택하고 사용하는 것에 대해서는 고민할 필요가 있다. 